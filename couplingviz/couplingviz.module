<?php 

/**
 * @file
 * Integrate Coupling Viz Component to Drupal System 
 *
 * Add all necessary drupal functionalities for 
 * CoupplingViz module
 * - user authentication
 * - user authorisation
 * - processing user queries
 * - storing user data
 */
 
 
 /**
 * Implementation of hook_menu()
 **/
 function couplingviz_menu(){
 
    
	$items['admin/config/couplingviz'] = array (
		'title' 		=> 'Coupling Viz Configuration', 
		'description' 	=> 'Coupling Viz is a visual representation system - set configuration of module',
		'position' 		=> 'right', 
		'weight' 		=> -10,
		'page callback' => 'system_admin_menu_block_page', 
		'access arguments' => array('administer site configuration'),
		'file' => 'system.admin.inc',
		'file path' => drupal_get_path('module', 'system'),
	);
	
	// Register route for couplingviz admin settings
	$items['admin/config/couplingviz/settings'] = array(
		'title' => 'Coupling Viz setting',
		'description' => 'Adjust Coupling Viz module option.', 
		'page callback' => 'drupal_get_form',
		'page arguments' => array('couplingviz_admin_settings'),
		'access arguments' => array('administer site configuration'),
		'type' =>  MENU_NORMAL_ITEM, 
		'file' => 'couplingviz.admin.inc',
	);
	
	// Register route for couplingviz main page
	$items['couplinghome'] = array(
		'title' => t('Coupling Viz Dynamic Form'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('couplingviz_metric_form'),
		'access callback' => TRUE,
		'type' => MENU_NORMAL_ITEM,
	); 
	
	// Register route for storing fanin and fanout data
	$items['savejsoncoupling'] = array(
		'title' => t('Save data posted to route in database'),
		'page callback' => 'save_json_coupling',
		'access callback' => TRUE,
	);
	
	// Register view for CBO data in JSONVIZ table
	$items['couplingdata/%/view'] = array(
		'title' => t('Repository File View'),
		'page arguments' => array(1), 
		'page callback' => 'view_saved_cbo',
		'access callback' => TRUE,
	);
	
	return $items;
 }
 
 
 /**
 * Use to view the CBO in JSONVIZ table
 * Callback by 'couplingdata/%/view'
 */
 function view_saved_cbo( $name = NULL ){
	$repoload_js_path = isset($info['preview_js']) ? $path . $info['preview_js'] : drupal_get_path('module', 'couplingviz') . '/' . 'repoload.js';
	$couplingviz_css_path = isset($info['preview_js']) ? $path . $info['preview_js'] : drupal_get_path('module', 'couplingviz') . '/' . 'couplingviz.css';
	drupal_add_js('https://code.jquery.com/jquery-1.12.4.min.js', array('weight' => 100));
	drupal_add_js('//d3js.org/d3.v3.min.js', array('weight' => 150));
	drupal_add_js($repoload_js_path, array('weight' => 100));
	drupal_add_css($couplingviz_css_path, array('weight' => 100));
	  
	$result = db_query("SELECT fname, fanoutdata, fanindata FROM {jsonviz} WHERE fid = :fid ",
																								array(
																								 ':fid' => $name, 
																								)); 
	foreach ($result as $row) {
		//echo $row->fname."<br/>";
	} 

	return t('@filename = is the CBO data file loaded. Click to View ->  
			<div id="fanout" style="display:none;"> 
				@fanoutdata
			</div>
			<div id="fanin" style="display:none;">
				@fanindata
			</div>
			<div name="refresh" id="generate-btn" value="refresh"> 
				Generate CBO 
			</div>
		', 
		array('@filename' => $row->fname, 
			'@fanoutdata' => $row->fanoutdata,
			'@fanindata' => $row->fanindata
		)
	); 
 }
 
 
 /**
 * Modify User Login Form Block
 */
 function couplingviz_form_user_login_block_alter(&$form, &$form_state) {
	$form['direction'] = array(
		'#markup' => t('Please log-in or Register to access coupling viz'),
		'#weight' => -5
	);
	 
	// Change 'Log in' to 'Sign in'.
	$form['submit']['#value'] = t('Sign in');

	$items[] = l(t('Sign Up'), 'user/register', array('attributes' => array('title' => t('Create a new user account.'))));
	//$items[] = l(t('Request new password'), 'user/password', array('attributes' => array('title' => t('Request new password via e-mail.'))));
	$form['links'] = array('#markup' => theme('item_list', array('items' => $items)));
	$form['#action'] = url($_GET['q'], array('query' => array('destination' => 'couplinghome')));
 }

 
  /**
  * Modify User Login Form
  */
  function couplingviz_form_user_login_alter(&$form, $form_state, $form_id) {
	$form['direction'] = array(
		'#markup' => t('Please log-in or Register to access coupling viz'),
		'#weight' => -5
	);
	
	
	$form['Occupation'] = array(
		 '#type' => 'textfield',
		 '#title' => t('Occupation'),
	);
	
	array_unshift($form['#validate'], 'couplingviz_form_user_login_validate');
	$form_state['redirect'] = 'node/1';
	// Change 'Log in' to 'Sign in'.
	$form['actions']['submit']['#value'] = t('Sign In');
	
  }
  
  /**
  * Login form validator
  */
  function couplingviz_form_user_login_validate($form, $form_state){
	watchdog("CouplingVizer",'!yeah coupling validate work');
	if (!is_string($form_state['values']['occupation'])) {
		 // We notify the form API that this field has failed validation.
		form_set_error('name', t('We are sorry but u cant chose a %value at the moment', array('%value' => $form_state['values']['room_type'])));
	} 
  }
  
  
 /**
 * Implements hook_block_info().
 */ 
  function couplingviz_block_info(){
    
	$blocks['viz_repo'] = array(
		 'info' => t('Coupling Viz json file repositry'),
		 'status' => TRUE,
		 'region' => 'sidebar_first',
		 'weight' => 0,
		 'visibility' => 1, 
	);
	
	$blocks['viz_diplay'] = array(
		 'info' => t('CouplingViz visual representation display'),
		 'status' => TRUE,
		 'region' => 'content',
		 'weight' => 0,
		 'visibility' => 1, 
	);
	
	return $blocks;
  }
 
 /**
 * Implements hook_block_configure().
 */
 function couplingviz_block_configure($delta){
	
	$form = array();
	
	switch($delta){
		
		case 'viz_repo':
			$form['file_num_count'] = array(
				 '#type' => 'textfield',
				 '#title' => t('Configure Number of repository file to show'),
				 '#size' => 6,
				 '#description' => t('Enter the number of pending comments that will appear in the block.'),
				 '#default_value' => variable_get('file_num_count', 5),
			); 
		break;		
		
	}
	return $form;
 } 
 
 /**
 * Implements hook_block_save().
 * Save setting of couplingviz block 
 */
 function couplingviz_block_save($delta = '', $edit = array()) {
	 switch($delta) {
		case 'viz_repo':
			variable_set('file_num_count', (int)$edit['file_num_count']);
		break;
	 }
	 return;
 } 
 
 /**
 * Implements hook_block_view().
 */
 function couplingviz_block_view($delta = '') {
	switch ($delta) {
	     // Block for displaying file repository by users
		 // couplingviz_block_contents hold the HTML elements that display file repository
		 case 'viz_repo':
			 $block['subject'] = t('Repository Files');
			 $block['content'] = couplingviz_block_contents($delta);
			 return $block;
		 break;
		 
		 // Block for displaying visual patterns of CBO
		 // couplingviz_block_contents hold the HTML elements that display visual pattern
		 case 'viz_diplay':
			$block['subject'] = t('Visual Represntation');
			$block['content'] = couplingviz_block_contents($delta);
			return $block;
		break;
	}
 } 
 
 /**
 * A module-defined block content function.
 */
 function couplingviz_block_contents($delta) {
	 switch ($delta) {
		 case 'viz_repo':
			// if (user_access('administer comments')) {
				 global $user;
				 $file_counts = variable_get('file_num_count');
				 $result = db_query("SELECT fname, fid FROM {jsonviz} WHERE uid = $user->uid limit $file_counts");
				
				 $items = array();
				 
				 foreach ($result as $row) {
					$items[] = l($row->fname, 'couplingdata/' . $row->fid . '/view');
				 }
			return array('#markup' => theme('item_list', array('items' => $items)));
			//}
		 break;
		 
		 case 'viz_diplay':
			$output = '';
			$output .= ' <div id="fanin" style="display:none;"> </div>';
			$output .= ' <div id="fanout" style="display:none;"> </div>';
			$output .= '<section id="maincontainer">';
			
			$output .= '<div class="vizlabels"> <label for="scaling"> Scale</label> <select id="scaling" onchange="scaleNodes(this.value);">';
			$output .= '<option value="0">0</option>';
			$output .= '<option value="1">1</option>';
			$output .= '<option value="2">2</option>';
			$output .= '<option value="3">3</option></select> </div>';
			
			$output .= '<div class="vizlabels"> <label for="links">Links</label> <input type="checkbox" id="links" onclick="displayLines(this);" checked /></div>';
			
			$output .= '<div class="vizlabels"> <label for="packages">Packages</label><input type="checkbox" id="packages" onclick="displayPackageBg(this);" checked /> </div>';
			
			$output .= '<div class="vizlabels"><label> Toggle View </label>';
			$output .= '<input type="radio" name="coupling" value="fanout" checked onClick="swapCollaboration(this)"> Fanout';
			$output .= '<input type="radio" name="coupling" value="fanin" onClick="swapCollaboration(this)"> Fanin</div>';
			
			$output .= '<div class="vizlabels" style= "width:250px;">';
			//$output .= '<input type="button" id="legendBtn" value="Colours" onclick="displayLegend()" />';
			$output .= '<div id="foreign" class="legend" onclick="displayLegend()">Foreign Inheritance</div>';
			$output .= '<div id="interface" class="legend" onclick="displayLegend()">Interface</div>';
			$output .= '<div id="local" class="legend" onclick="displayLegend()"> Local	Inheritance</div>';
			$output .= '<div id="direct" class="legend" onclick="displayLegend()">Direct</div>';
			$output .= '</div>';
			
			$output .= '<div id="main" style="width:150%; float:left; position: relative; margin-top:20px;"></div>';
			
			$output .= '</section>';
			return array('#markup' => $output);
		 break;
		 
		 
	 }
 } 
 
 
  /**
 * Implement hook_form()
 * Responsible for creating initial CBO data
 * by sending request to CouplingViz Rest 
 * Using ajax.
 * Output form that accept user java zip file input
 * @see coupling_viz_dynamic menu
 */ 
 
 function couplingviz_metric_form($form, &$form_state){
	
	$form['viz_filename'] = array(
		'#name' => 'file_name',
		'#type' => 'textfield',
		'#title' => t('File Name'),
		'#size' => 22,
		'#prefix' => '<div class="poll-form"> File Name ',
		'#suffix' => '</div>',
		'#theme_wrappers' => array(),
		'#weight' => -20,
	);
	
	$form['fanin'] = array(
		'#name' => 'TheFile',
		'#type' => 'file',
		'#title' => t('Choose a file'),
		'#title_display' => 'invisible',
		'#size' => 22,
		'#prefix' => '<div class="poll-form"> Upload Form',
		'#suffix' => '</div>', 
		'#theme_wrappers' => array(),
		'#weight' => -10,
	);
	
	$form['display_btn'] = array(
		'#type' => 'item',
		'#markup' => '<div name="refresh" id="generate-btn" value="refresh"> Generate CBO </div>',
	);
	
	$form['uid'] = array('#type' => 'hidden');
	
	global $base_path;
    global $base_url;

     $my_base_path = $GLOBALS['base_url'] . $GLOBALS['base_path'];
    // or $my_base_path = $base_url . $base_path;


       $my_settings = array(
         'basePath' => $base_path,
         'animationEffect' => variable_get('effect', 'none')
       );
	 drupal_add_js(array('couplingviz' => array('key' => 'value')), 'setting');
	
	$vizTrigger_js_path = isset($info['preview_js']) ? $path . $info['preview_js'] : drupal_get_path('module', 'couplingviz') . '/' . 'viztrigger.js';
	$couplingviz_js_path = isset($info['preview_js']) ? $path . $info['preview_js'] : drupal_get_path('module', 'couplingviz') . '/' . 'couplingviz.js';
	$couplingviz_css_path = isset($info['preview_js']) ? $path . $info['preview_js'] : drupal_get_path('module', 'couplingviz') . '/' . 'couplingviz.css';
	drupal_add_js('https://code.jquery.com/jquery-1.12.4.min.js', array('weight' => 100));

	drupal_add_js('//d3js.org/d3.v3.min.js', array('weight' => 150));
	drupal_add_js($vizTrigger_js_path, array('weight' => 100));
	drupal_add_js($couplingviz_js_path, array('weight' => 200));
	drupal_add_css($couplingviz_css_path, array('weight' => 100));
	return $form;
 } 
 
  /**
  * Call back function for savejsoncoupling menu routine
  * Responsible for inserting data into JSON table 
  */
  function save_json_coupling(){
	if(! empty( $_POST['Fanout'] )){
		global $user;
		$fanoutData = $_POST['Fanout'] ;
		$fileName 	= $_POST['filename'];
		$faninData 	= $_POST['Fanin'] ;
		$output 	= 'This is File Name = ' . $fileName . '';
		$output		.= 'This is Fanout Data = ' . $fanoutData . '';
		$output 	.= 'This is Fanin Data = ' . $faninData . '';
		echo $output ;
		
		$nid = db_insert('jsonviz')
		 ->fields(array(
		 'uid' => $user->uid,
		 'fname' => $fileName,
		 'fanoutdata' => $fanoutData ,
		 'fanindata' => $faninData ,
		 ))
		->execute(); 
	}
	
	if(! empty( $_POST['Fanin'] )){
		$faninData = $_POST['Fanin'] ;
		echo 'This is Fanin Data = ' . $faninData . '! ';
	}
 }
 
 /**
 * Implement hook_init()
 * Pass required global variable to javascript
 * Helps module installation process
 */
 function couplingviz_init(){

		global $base_path;
		global $base_url;

		$my_base_path = $GLOBALS['base_url'] . $GLOBALS['base_path'];
		// or $my_base_path = $base_url . $base_path;

		$module_path = drupal_get_path('module', 'couplingviz');
		
		$server = 'http://'. $_SERVER['SERVER_NAME'];
		
		$viz_rest_server = variable_get('rest_viz_server_name', 'none');

		$my_settings = array(
			'basePath' => $base_path,
			'serverName' => $server,
			'modulePath' => $module_path,
			'vizRestServer' => $viz_rest_server,
		);

      drupal_add_js(array('couplingviz' => $my_settings), 'setting');
 }